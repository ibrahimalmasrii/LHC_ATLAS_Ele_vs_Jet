# -*- coding: utf-8 -*-
"""
Created on Sun Jul 10 14:45:58 2022

@author: USER
"""


import csv
import pickle

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import xgboost as xgb
from sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import SGDClassifier

from sklearn.model_selection import train_test_split

from sklearn.metrics import average_precision_score

from sklearn.metrics import (
    auc,
    classification_report,
    plot_confusion_matrix,
    plot_roc_curve,
)

from sklearn.metrics import precision_recall_curve

from sklearn.metrics import plot_precision_recall_curve

from sklearn.metrics import roc_curve, roc_auc_score


import tensorflow as tf
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
from sklearn.metrics import f1_score
from datetime import datetime
import os, sys
from tensorflow.keras.utils import to_categorical, plot_model

from tensorflow import keras
from keras import callbacks
import matplotlib as mpl  
mpl.rcParams['figure.figsize'] = [12.0, 8.0]


#--------- Functions -----------


def mnorm(data):
    '''
    Function for normalise image data to have a range of pixel intensity of [0,1]
    Input:
    data to be normalised
    
    Output:
    normalised data
    '''
    normdata=[]
    for i in range (len(data)):
        normdata.append(data[i]/np.max(data[i]))
    return np.asarray(normdata)


def convert2D(data):
    '''
    Function to convert data array into 2D picture
    
    Input: 
    data in shape (51,)
    
    Output: 
    data in picture shaped (3,17)
    '''

    array = []

    for i in range (len(data)):
        a = np.reshape(data[i], [3, 17])
        array.append(a)
        

    return array
        
#--------- /Functions -----------






#----------- Data -----------------

input_file = "data/2nd_DS_V02.csv"

np.set_printoptions(precision=2)

df = pd.read_csv(input_file)

all_data = df

y = df["Result"]
x = df.drop("Result", axis=1)

x1 = df.to_numpy()

x1 = np.delete(x1, 51, 1)



X = mnorm(x1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=4)


fig, ax = plt.subplots()

results = []
model_displays = {}
scoring = "accuracy"


names = [
    "NearestNeighbors",
    "DecisionTree",
    "RandomForest",
    "XGBoost",
    "NeuralNet",
    "AdaBoost",
]

classifiers = [
    KNeighborsClassifier(n_neighbors=3, n_jobs=-1),
    DecisionTreeClassifier(
        random_state=0,
        max_depth=5,
        min_samples_leaf=1,
        min_samples_split=2,
        splitter="best",
    ),
    RandomForestClassifier(max_depth=3, n_estimators=10, n_jobs=-1),
    xgb.XGBClassifier(
        n_estimators=100,
        colsample_bytree=0.8317,
        learning_rate=0.3,
        max_depth=11,
        min_child_weight=3.0,
        subsample=0.9099,
        gamma=0.292,
        reg_lambda=0.447,
    ),
    MLPClassifier(alpha=1, max_iter=1000),
    AdaBoostClassifier(),
]


fig, ax = plt.subplots()

results = []
model_displays = {}
model_displays_PR = {}
ROC_auc_array = {}
PR_auc_array = {}
scoring = "accuracy"
loss_function = 'binary_crossentropy'            # loss function for model training
nb_epochs = 40                                   # optimal number of epochs
do_shuffle = True                                # reshuffle data set during train test split
test_sample_size = 0                             # test sample size - Not used
train_sample_size = 0                            # train sample size - Not used


for name, model in zip(names, classifiers):

    print("Predicting with", name)

    picklefile = str(name) + ".pickle"

    clf = model.fit(X_train, y_train)
    y_predicted = clf.predict(X_test)
    print(clf.score(X_train, y_train), clf.score(X_test, y_test))
    try:
        y_score = clf.predict_proba(X_test)[:, 1]
    except:
        print("clf.predict_proba unavailable")
        continue
    
    ROC_auc = roc_auc_score(y_test, y_score)
    print('The area under the ROC curve', name, ROC_auc)
    
    ROC_auc_array['ROC score', name] = roc_auc_score(y_test, y_score)
    
    PR_auc_array['PR score for', name] = average_precision_score(y_test, y_score)
   
    plt_lable = name + " = " + format(ROC_auc)

   
    prob = clf.predict(X_test)

    fpr, tpr, thresholds = roc_curve(y_test.ravel(), prob.ravel())
    value = np.interp(0.9, tpr, fpr)                                # obtain fpr for 90% tpr on ROC curve

    plt.plot(fpr,tpr, label = plt_lable)
    
  
    
'''
    disp = plot_confusion_matrix(
        clf,
        X_test,
        y_test,
        display_labels=["Jet", "Ele"],
        cmap=plt.cm.get_cmap("hot"),
    )
    disp.ax_.set_title(name + "Confusion Matrix")
    print(disp.confusion_matrix)
    plt.savefig(name + "confusion_matrix.png")

    np.set_printoptions(precision=4)

    print("Saving model")
    with open(picklefile, "wb") as f:
        pickle.dump(clf, f)

   # print("Plotting roc")
    

    
    
    
    #model_displays_PR[name] = plot_precision_recall_curve(clf, X_test, y_test, ax=ax, name=name)
    
    report = classification_report(
        y_test, y_predicted, target_names=["Jet", "Ele"]
    )
    results.append(
        [name, clf.score(X_train, y_train), clf.score(X_test, y_test), report]
    )

    print(name, "Classification report:\n", report)
    print(name, "Accuracy = ",clf.score(X_test,y_test))

'''

#------------ CNN ---------------

  
x1 = df.to_numpy()

x1 = np.delete(x1, 51, 1)

x_2D = convert2D(x1)

x_2d_mnorm = mnorm(x_2D)

x = x_2d_mnorm.reshape( (x_2d_mnorm.shape[0], x_2d_mnorm.shape[1], x_2d_mnorm.shape[2], 1) )

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=4)

input_shape = x[0].shape


###### Model Architecture #######
model=keras.models.Sequential()
model.add(keras.layers.Conv2D(32, (1,3), activation='relu', input_shape=input_shape))
model.add(keras.layers.Conv2D(32, (2,2), activation='relu' ))
model.add(keras.layers.MaxPooling2D((2, 2)))
model.add(keras.layers.Dropout(rate = 0.2))

model.add(keras.layers.Flatten())
model.add(keras.layers.Dense(256))

model.add(keras.layers.Activation('relu'))
model.add(keras.layers.Dropout(rate = 0.2))
model.add(keras.layers.Dense(1, activation='sigmoid'))

earlystopping = callbacks.EarlyStopping(monitor ="val_loss", verbose = 1, 
                                        mode ="min", patience = 5, 
                                        restore_best_weights = True);

model.compile(loss=loss_function,optimizer='adam', metrics=['accuracy'])



###### Training #######
start=datetime.now()
history = model.fit(x_train, y_train, epochs=nb_epochs,batch_size=100, verbose=0, callbacks=earlystopping)
runtime = datetime.now()-start

###### Evaluation ######
print("MODEL Evaluation:")
print()
test_loss, test_acc = model.evaluate(x_test, y_test, verbose=0) # test loss and accuracy

prob = model.predict(x_test, verbose=0)                         # using model to predict probability
pred_label = np.round(prob)                                     # rounding probability into 0/1

fpr, tpr, thresholds = roc_curve(y_test.ravel(), prob.ravel())  # ROC curve
roc_auc = roc_auc_score(y_test,prob)                            # Area under ROC curve

plt_lable = "CNN  = " + format(roc_auc)

plt.plot(fpr,tpr, label = plt_lable)                              # ROC curve plot


print("Test Loss     = {0:.4f}". format(test_loss))
print("Test Accuracy = {0:.4f}". format(test_acc))
print("ROC score     = {0:.4f}".format(roc_auc))
print("Training Runtime:", runtime)
print("At 90% signal efficiency we have a false positive rate of {0:.4f}". format(value))
print()



###### Plots ######


# Confusion Matrix


# ROC Curve

#model_displays["CNN"] = plot_roc_curve(model, x_test, y_test, ax=ax, name="CNN")
ROC_auc_array['ROC score CNN'] = roc_auc_score(y_test, prob)


                                 # set title





#------------ /CNN ---------------



plt.xlabel("False positive rate")
plt.ylabel("True positive rate")
plt.title("ROC curve")
plt.plot([value,value],[0,0.9], linestyle='--', color='r')  # vertical line for tpr=0.9
plt.legend()  
plt.legend(loc="best")
plt.show()

_ = ax.set_title("ROC curve")
ax.set_xlim(0, 0.2)
ax.set_ylim(0.8, 1)
plt.savefig("data/multi_model_roc_curve.png")





#accuracy_results = dict(zip(names, results))
#print(accuracy_results)

#print(ROC_auc_array)


'''with open("scaling_multi_model_results.csv", "w") as file:
    w = csv.writer(file)
    w.writerows(accuracy_results.items())
'''
